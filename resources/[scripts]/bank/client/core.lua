-----------------------------------------------------------------------------------------------------------------------------------------
-- VRP
-----------------------------------------------------------------------------------------------------------------------------------------
local Tunnel = module("vrp", "lib/Tunnel")
local Proxy = module("vrp", "lib/Proxy")
vRP = Proxy.getInterface("vRP")
-----------------------------------------------------------------------------------------------------------------------------------------
-- CONNECTION
-----------------------------------------------------------------------------------------------------------------------------------------
vSERVER = Tunnel.getInterface("bank")
-----------------------------------------------------------------------------------------------------------------------------------------
-- BANK:OPEN
-----------------------------------------------------------------------------------------------------------------------------------------
AddEventHandler("bank:Open", function()
	if not exports["hud"]:Wanted() then
		TriggerEvent("Progress", "Abrindo", 3500)
		LocalPlayer["state"]:set("Cancel", true, true)
		LocalPlayer["state"]:set("Buttons", true, true)
		vRP.PlayAnim(false, { "amb@prop_human_atm@male@enter", "enter" }, false)

		SetTimeout(3500, function()
			SetNuiFocus(true, true)
			LocalPlayer["state"]:set("Cancel", false, true)
			LocalPlayer["state"]:set("Buttons", false, true)
			SendNUIMessage({ Action = "Open", name = LocalPlayer["state"]["Name"] })
		end)
	end
end)
-----------------------------------------------------------------------------------------------------------------------------------------
-- CLOSE
-----------------------------------------------------------------------------------------------------------------------------------------
RegisterNUICallback("Close", function(Data, Callback)
	SetNuiFocus(false, false)
	SendNUIMessage({ Action = "Hide" })
	TriggerEvent("Progress", "Fechando", 3500)
	LocalPlayer["state"]:set("Cancel", true, true)
	LocalPlayer["state"]:set("Buttons", true, true)
	vRP.PlayAnim(false, { "amb@prop_human_atm@male@exit", "exit" }, false)

	SetTimeout(3500, function()
		LocalPlayer["state"]:set("Cancel", false, true)
		LocalPlayer["state"]:set("Buttons", false, true)
		vRP.Destroy()
	end)

	Callback(true)
end)
-----------------------------------------------------------------------------------------------------------------------------------------
-- HOME
-----------------------------------------------------------------------------------------------------------------------------------------
RegisterNUICallback("Home", function(Data, Callback)
	Callback(vSERVER.Home())
end)
-----------------------------------------------------------------------------------------------------------------------------------------
-- DEPOSIT
-----------------------------------------------------------------------------------------------------------------------------------------
RegisterNUICallback("Deposit", function(Data, Callback)
	if MumbleIsConnected() then
		Callback(vSERVER.Deposit(Data["value"]))
	end
end)
-----------------------------------------------------------------------------------------------------------------------------------------
-- WITHDRAW
-----------------------------------------------------------------------------------------------------------------------------------------
RegisterNUICallback("Withdraw", function(Data, Callback)
	if MumbleIsConnected() then
		Callback(vSERVER.Withdraw(Data["value"]))
	end
end)
-----------------------------------------------------------------------------------------------------------------------------------------
-- TRANSFER
-----------------------------------------------------------------------------------------------------------------------------------------
RegisterNUICallback("Transfer", function(Data, Callback)
	if Data["targetId"] and Data["value"] and MumbleIsConnected() then
		Callback(vSERVER.Transfer(Data["targetId"], Data["value"]))
	else
		Callback(false)
	end
end)
-----------------------------------------------------------------------------------------------------------------------------------------
-- INVESTMENTS
-----------------------------------------------------------------------------------------------------------------------------------------
RegisterNUICallback("Investments", function(Data, Callback)
	Callback(vSERVER.Investments())
end)
-----------------------------------------------------------------------------------------------------------------------------------------
-- INVEST
-----------------------------------------------------------------------------------------------------------------------------------------
RegisterNUICallback("Invest", function(Data, Callback)
	if Data["value"] and MumbleIsConnected() then
		Callback(vSERVER.Invest(Data["value"]))
	else
		Callback(false)
	end
end)
-----------------------------------------------------------------------------------------------------------------------------------------
-- INVESTRESCUE
-----------------------------------------------------------------------------------------------------------------------------------------
RegisterNUICallback("InvestRescue", function(Data, Callback)
	if MumbleIsConnected() then
		Callback(vSERVER.InvestRescue())
	end
end)
-----------------------------------------------------------------------------------------------------------------------------------------
-- TRANSACTIONHISTORY
-----------------------------------------------------------------------------------------------------------------------------------------
RegisterNUICallback("TransactionHistory", function(Data, Callback)
	Callback(vSERVER.TransactionHistory())
end)
-----------------------------------------------------------------------------------------------------------------------------------------
-- MAKEINVOICE
-----------------------------------------------------------------------------------------------------------------------------------------
RegisterNUICallback("MakeInvoice", function(Data, Callback)
	if Data["passport"] and Data["value"] and Data["reason"] and MumbleIsConnected() then
		Callback(vSERVER.MakeInvoice(Data["passport"], Data["value"], Data["reason"]))
	else
		Callback(false)
	end
end)
-----------------------------------------------------------------------------------------------------------------------------------------
-- INVOICEPAYMENT
-----------------------------------------------------------------------------------------------------------------------------------------
RegisterNUICallback("InvoicePayment", function(Data, Callback)
	if MumbleIsConnected() then
		Callback(vSERVER.InvoicePayment(Data["id"]))
	end
end)
-----------------------------------------------------------------------------------------------------------------------------------------
-- INVOICELIST
-----------------------------------------------------------------------------------------------------------------------------------------
RegisterNUICallback("InvoiceList", function(Data, Callback)
	Callback(vSERVER.InvoiceList())
end)
-----------------------------------------------------------------------------------------------------------------------------------------
-- FINELIST
-----------------------------------------------------------------------------------------------------------------------------------------
RegisterNUICallback("FineList", function(Data, Callback)
	Callback(vSERVER.FineList())
end)
-----------------------------------------------------------------------------------------------------------------------------------------
-- FINEPAYMENT
-----------------------------------------------------------------------------------------------------------------------------------------
RegisterNUICallback("FinePayment", function(Data, Callback)
	if MumbleIsConnected() then
		Callback(vSERVER.FinePayment(Data["id"]))
	end
end)
-----------------------------------------------------------------------------------------------------------------------------------------
-- FINEPAYMENTALL
-----------------------------------------------------------------------------------------------------------------------------------------
RegisterNUICallback("FinePaymentAll", function(Data, Callback)
	if MumbleIsConnected() then
		Callback(vSERVER.FinePaymentAll())
	end
end)
-----------------------------------------------------------------------------------------------------------------------------------------
-- TAXES
-----------------------------------------------------------------------------------------------------------------------------------------
RegisterNUICallback("Taxes", function(Data, Callback)
	Callback(vSERVER.TaxList())
end)
-----------------------------------------------------------------------------------------------------------------------------------------
-- TAXPAYMENT
-----------------------------------------------------------------------------------------------------------------------------------------
RegisterNUICallback("TaxPayment", function(Data, Callback)
	if MumbleIsConnected() then
		Callback(vSERVER.TaxPayment(Data["id"]))
	end
end)

-----------------------------------------------------------------------------------------------------------------------------------------
-- ATM
-----------------------------------------------------------------------------------------------------------------------------------------
local Atm = {
	["1"] = vec3(121.17, -3019.62, 7.04),
	["2"] = vec3(797.69, -767.52, 26.77),
	["3"] = vec3(961.42, 41.48, 71.7),
	["4"] = vec3(168.55, 6636.81, 31.69),
	["5"] = vec3(-32.08, -1104.32, 27.26),
	["6"] = vec3(228.18, 338.4, 105.56),
	["7"] = vec3(158.63, 234.22, 106.63),
	["8"] = vec3(-57.67, -92.62, 57.78),
	["9"] = vec3(356.97, 173.54, 103.07),
	["10"] = vec3(-1415.94, -212.03, 46.51),
	["11"] = vec3(-1430.2, -211.08, 46.51),
	["12"] = vec3(-1282.54, -210.9, 42.44),
	["13"] = vec3(-1286.25, -213.44, 42.44),
	["14"] = vec3(-1289.32, -226.82, 42.44),
	["15"] = vec3(-1285.58, -224.28, 42.44),
	["16"] = vec3(-1109.8, -1690.82, 4.36),
	["17"] = vec3(1686.85, 4815.82, 42.01),
	["18"] = vec3(1701.21, 6426.57, 32.76),
	["19"] = vec3(1171.56, 2702.58, 38.16),
	["20"] = vec3(1172.5, 2702.59, 38.16),
	["21"] = vec3(-1091.49, 2708.66, 18.96),
	["22"] = vec3(-3144.38, 1127.6, 20.86),
	["23"] = vec3(527.36, -160.69, 57.09),
	["24"] = vec3(285.45, 143.39, 104.17),
	["25"] = vec3(-846.27, -341.28, 38.67),
	["26"] = vec3(-846.85, -340.2, 38.67),
	["27"] = vec3(-721.06, -415.56, 34.98),
	["28"] = vec3(-1410.34, -98.75, 52.42),
	["29"] = vec3(-1409.78, -100.49, 52.39),
	["30"] = vec3(-712.9, -818.92, 23.72),
	["31"] = vec3(-710.05, -818.9, 23.72),
	["32"] = vec3(-660.71, -854.07, 24.48),
	["33"] = vec3(-594.58, -1161.29, 22.33),
	["34"] = vec3(-596.09, -1161.28, 22.33),
	["35"] = vec3(-821.64, -1081.91, 11.12),
	["36"] = vec3(155.93, 6642.86, 31.59),
	["37"] = vec3(174.14, 6637.94, 31.58),
	["38"] = vec3(-283.01, 6226.11, 31.49),
	["39"] = vec3(-95.55, 6457.19, 31.46),
	["40"] = vec3(-97.3, 6455.48, 31.46),
	["41"] = vec3(-132.93, 6366.52, 31.48),
	["42"] = vec3(-386.74, 6046.08, 31.49),
	["43"] = vec3(24.47, -945.96, 29.35),
	["44"] = vec3(5.24, -919.83, 29.55),
	["45"] = vec3(295.77, -896.1, 29.22),
	["46"] = vec3(296.47, -894.21, 29.23),
	["47"] = vec3(1138.22, -468.93, 66.73),
	["48"] = vec3(1166.97, -456.06, 66.79),
	["49"] = vec3(1077.75, -776.54, 58.23),
	["50"] = vec3(289.1, -1256.8, 29.44),
	["51"] = vec3(288.81, -1282.37, 29.64),
	["52"] = vec3(-1571.05, -547.38, 34.95),
	["53"] = vec3(-1570.12, -546.72, 34.95),
	["54"] = vec3(-1305.4, -706.41, 25.33),
	["55"] = vec3(-2072.36, -317.28, 13.31),
	["56"] = vec3(-2295.48, 358.13, 174.6),
	["57"] = vec3(-2294.7, 356.46, 174.6),
	["58"] = vec3(-2293.92, 354.8, 174.6),
	["59"] = vec3(2558.75, 351.01, 108.61),
	["60"] = vec3(89.69, 2.47, 68.29),
	["61"] = vec3(-866.69, -187.75, 37.84),
	["62"] = vec3(-867.62, -186.09, 37.84),
	["63"] = vec3(-618.22, -708.89, 30.04),
	["64"] = vec3(-618.23, -706.89, 30.04),
	["65"] = vec3(-614.58, -704.83, 31.24),
	["66"] = vec3(-611.93, -704.83, 31.24),
	["67"] = vec3(-537.82, -854.49, 29.28),
	["68"] = vec3(-526.62, -1222.98, 18.45),
	["69"] = vec3(-165.15, 232.7, 94.91),
	["70"] = vec3(-165.17, 234.78, 94.91),
	["71"] = vec3(-303.25, -829.74, 32.42),
	["72"] = vec3(-301.7, -830.01, 32.42),
	["73"] = vec3(-203.81, -861.37, 30.26),
	["74"] = vec3(119.06, -883.72, 31.12),
	["75"] = vec3(112.58, -819.4, 31.34),
	["76"] = vec3(111.26, -775.25, 31.44),
	["77"] = vec3(114.43, -776.38, 31.41),
	["78"] = vec3(-256.23, -715.99, 33.53),
	["79"] = vec3(-258.87, -723.38, 33.48),
	["80"] = vec3(-254.42, -692.49, 33.6),
	["81"] = vec3(-28.0, -724.52, 44.23),
	["82"] = vec3(-30.23, -723.69, 44.23),
	["83"] = vec3(-1315.75, -834.69, 16.95),
	["84"] = vec3(-1314.81, -835.96, 16.95),
	["85"] = vec3(-2956.86, 487.64, 15.47),
	["86"] = vec3(-2958.98, 487.73, 15.47),
	["87"] = vec3(-3043.97, 592.42, 7.9),
	["88"] = vec3(-3241.17, 997.6, 12.55),
	["89"] = vec3(-1205.78, -324.79, 37.86),
	["90"] = vec3(-1205.02, -326.3, 37.84),
	["91"] = vec3(147.58, -1035.77, 29.34),
	["92"] = vec3(146.0, -1035.17, 29.34),
	["93"] = vec3(33.55, -1345.0, 29.49),
	["94"] = vec3(2555.28, 389.99, 108.61),
	["95"] = vec3(1153.65, -326.78, 69.2),
	["96"] = vec3(-717.71, -915.66, 19.21),
	["97"] = vec3(-56.98, -1752.09, 29.42),
	["98"] = vec3(381.93, 326.43, 103.56),
	["99"] = vec3(-3243.78, 1009.24, 12.82),
	["100"] = vec3(1737.02, 6413.25, 35.03),
	["101"] = vec3(540.4, 2667.86, 42.16),
	["102"] = vec3(1966.81, 3746.52, 32.33),
	["103"] = vec3(2680.45, 3288.48, 55.23),
	["104"] = vec3(1703.0, 4933.6, 42.06),
	["105"] = vec3(-1827.3, 784.88, 138.3),
	["106"] = vec3(-3043.91, 592.48, 7.9),
	["107"] = vec3(238.61, 212.44, 106.27),
	["108"] = vec3(239.06, 213.67, 106.27),
	["109"] = vec3(239.5, 214.88, 106.27),
	["110"] = vec3(239.94, 216.15, 106.27),
	["111"] = vec3(241.01, 219.02, 106.27),
	["112"] = vec3(241.43, 220.24, 106.27),
	["113"] = vec3(241.89, 221.49, 106.27),
	["114"] = vec3(242.35, 222.7, 106.27),
	["115"] = vec3(264.02, 203.62, 106.27),
	["116"] = vec3(264.48, 204.89, 106.27),
	["117"] = vec3(264.94, 206.14, 106.27),
	["118"] = vec3(265.38, 207.34, 106.27),
	["119"] = vec3(126.82, -1296.6, 29.27),
	["120"] = vec3(127.81, -1296.03, 29.27),
	["121"] = vec3(-248.04, 6327.51, 32.42),
	["122"] = vec3(315.09, -593.68, 43.29),
	["123"] = vec3(-677.36, 5834.58, 17.32),
	["124"] = vec3(472.3, -1001.57, 30.68),
	["125"] = vec3(468.52, -990.55, 26.27),
	["126"] = vec3(349.86, -594.51, 28.8),
	["127"] = vec3(2564.5, 2584.79, 38.08),
	["128"] = vec3(-1200.76, -885.44, 13.26),
	["129"] = vec3(821.54, -780.27, 26.17),
	["130"] = vec3(-1243.12, -1455.52, 4.31),
	["131"] = vec3(-1242.01, -1454.75, 4.31),
	["132"] = vec3(-1240.89, -1453.96, 4.31),
	["133"] = vec3(822.93, -825.94, 26.32),
	["134"] = vec3(-609.78, -1091.97, 22.33),
	["135"] = vec3(560.1, 2742.66, 43.35),
	["136"] = vec3(540.22, 2671.54, 42.3),
	["137"] = vec3(33.22, -1348.66, 29.63),
	["138"] = vec3(961.48, 41.24, 72.0),
	["139"] = vec3(236.85, 219.76, 106.61),
	["140"] = vec3(237.27, 218.87, 106.58),
	["141"] = vec3(237.7, 217.94, 106.6),
	["142"] = vec3(238.13, 217.02, 106.59),
	["143"] = vec3(238.57, 216.09, 106.62),
	["144"] = vec3(-34.76, -212.94, 45.88)
}

-----------------------------------------------------------------------------------------------------------------------------------------
-- THREADATMTARGET
-----------------------------------------------------------------------------------------------------------------------------------------
CreateThread(function()
	for Number, v in pairs(Atm) do
		exports["target"]:AddCircleZone("Atm:" .. Number, v, 0.5, {
			name = "Atm:" .. Number,
			heading = 0.0
		}, {
			Distance = 1.0,
			options = {
				{
					event = "bank:Open",
					label = "Abrir",
					tunnel = "client"
				}, {
					event = "player:GetCard",
					label = "Solicitar Cartão",
					tunnel = "server"
				}
			}
		})
	end
end)